import React, {useState, useEffect} from 'react';
import {Header} from "../../components/common/Header/Header";
import {Footer} from "../../components/common/Footer/Footer";
import {Button} from "../../components/common/Button/Button";
import {Input} from "../../components/common/Input/Input";
import {Select} from "../../components/common/Select/Select";
import {ErrorField} from "../../components/common/ErrorField/ErrorField";
import '../../styles/styles.css';
import './Profile.css';

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
interface Achievement {
    id: number;
    title: string;
    icon?: string;
}

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
interface Project {
    id: number;
    title: string;
    isPrivate: boolean;
    emoji: string;
}

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserData {
    firstName: string;
    lastName: string;
    email: string;
    city: string;
    avatar: string;
    achievements: Achievement[];
    projects: Project[];
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
const cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–¢–æ–º—Å–∫'];

const ProfilePage: React.FC = () => {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const initialUserData: UserData = {
        firstName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
        lastName: '–õ–∞–ø—à–∞–∫–æ–≤–∞',
        email: 'avk65@tbank.ru',
        city: '–¢–æ–º—Å–∫',
        avatar: 'https://placekitten.com/200/200', // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        achievements: [],
        projects: [
            {
                id: 1,
                title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ä–æ–±–æ—Ç–∞-–ø—ã–ª–µ—Å–æ—Å–∞',
                isPrivate: false,
                emoji: 'ü§ñ'
            },
            {
                id: 2,
                title: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏—á–∫–∞ "–ö–∞–∫–æ–π —Ç—ã –∫—Ä–∏–ø—Å —Å–µ–≥–æ–¥–Ω—è?"',
                isPrivate: true,
                emoji: 'ü¶ä'
            }
        ]
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const [userData, setUserData] = useState<UserData>(initialUserData);
    const [editMode, setEditMode] = useState<boolean>(false);
    const [formData, setFormData] = useState<Omit<UserData, 'achievements' | 'projects'>>(
        {firstName: '', lastName: '', email: '', city: '', avatar: ''}
    );

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const [errors, setErrors] = useState<{ [key: string]: string }>({});
    const [isSaving, setIsSaving] = useState<boolean>(false);
    const [showSavedMessage, setShowSavedMessage] = useState<boolean>(false);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    useEffect(() => {
        if (editMode) {
            setFormData({
                firstName: userData.firstName,
                lastName: userData.lastName,
                email: userData.email,
                city: userData.city,
                avatar: userData.avatar
            });
        }
    }, [editMode, userData]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleEdit = () => {
        setEditMode(true);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const {name, value} = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (errors[name]) {
            setErrors(prev => {
                const newErrors = {...prev};
                delete newErrors[name];
                return newErrors;
            });
        }
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    const validateForm = (): boolean => {
        const newErrors: { [key: string]: string } = {};

        if (!formData.firstName.trim()) {
            newErrors.firstName = '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ';
        }

        if (!formData.lastName.trim()) {
            newErrors.lastName = '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ';
        }

        if (!formData.email.trim()) {
            newErrors.email = '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ';
        } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü—Ä–∏–º–µ—Ä: user@example.com';
        }

        if (!formData.city) {
            newErrors.city = '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleSave = () => {
        if (validateForm()) {
            setIsSaving(true);

            // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            setTimeout(() => {
                setUserData(prev => ({
                    ...prev,
                    firstName: formData.firstName,
                    lastName: formData.lastName,
                    email: formData.email,
                    city: formData.city,
                }));

                setIsSaving(false);
                setEditMode(false);
                setShowSavedMessage(true);

                // –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    setShowSavedMessage(false);
                }, 3000);
            }, 1000);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleCancel = () => {
        setEditMode(false);
        setErrors({});
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const handleOpenProject = (projectId: number) => {
        console.log(`–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);
        // navigate(`/projects/${projectId}`);
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const navigateToAllProjects = () => {
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤');
        // navigate('/projects');
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    const handleAvatarUpload = () => {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
    };

    return (
        <div className="main-container">
            <Header />
            <div className="main-content">
                {showSavedMessage && (
                    <div className="save-message">
                        –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
                    </div>
                )}

                <div className="profile-section">
                    {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∞–≤–∞—Ç–∞—Ä –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
                    <div className="profile-left-column">
                        <div className="profile-avatar-container">
                            <div className="avatar-status">–≤ —Å–µ—Ç–∏</div>
                            <img src={userData.avatar} alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" className="profile-avatar" />
                            {editMode && (
                                <button onClick={handleAvatarUpload} className="change-avatar-button">
                                    –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
                                </button>
                            )}
                        </div>
                        <div className="profile-achievements">
                            <h2>–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
                            <div className="achievements-content">
                                {userData.achievements.length > 0 ? (
                                    <ul className="achievements-list">
                                        {userData.achievements.map((achievement) => (
                                            <li key={achievement.id} className="achievement-item">
                                                {achievement.icon} {achievement.title}
                                            </li>
                                        ))}
                                    </ul>
                                ) : (
                                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>
                                )}
                            </div>
                        </div>
                    </div>

                    {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="profile-right-column">
                        <div className="profile-info-container">
                            <div className="profile-info-header">
                                <h2>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                                {!editMode ? (
                                    <button onClick={handleEdit} className="edit-button">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                                ) : (
                                    <div className="save-cancel-buttons">
                                        <button onClick={handleCancel} className="cancel-button">–û—Ç–º–µ–Ω–∞</button>
                                        <Button onClick={handleSave} disabled={isSaving}>
                                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div className="profile-info-content">
                                {!editMode ? (
                                    // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                    <>
                                        <div className="profile-info-item">
                                            <span className="info-label">–ò–º—è</span>
                                            <span className="info-value">{userData.firstName}</span>
                                        </div>
                                        <div className="profile-info-item">
                                            <span className="info-label">–§–∞–º–∏–ª–∏—è</span>
                                            <span className="info-value">{userData.lastName}</span>
                                        </div>
                                        <div className="profile-info-item">
                                            <span className="info-label">Email</span>
                                            <span className="info-value">{userData.email}</span>
                                        </div>
                                        <div className="profile-info-item">
                                            <span className="info-label">–ì–æ—Ä–æ–¥</span>
                                            <span className="info-value">{userData.city}</span>
                                        </div>
                                    </>
                                ) : (
                                    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                    <>
                                        <div className="form-group">
                                            <label htmlFor="firstName">–ò–º—è*</label>
                                            <Input
                                                id="firstName"
                                                name="firstName"
                                                value={formData.firstName}
                                                onChange={handleInputChange}
                                                hasError={!!errors.firstName}
                                                placeholder="–ò–º—è*"
                                            />
                                            {errors.firstName && <ErrorField message={errors.firstName} />}
                                            <div className="required-label">–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</div>
                                        </div>

                                        <div className="form-group">
                                            <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è*</label>
                                            <Input
                                                id="lastName"
                                                name="lastName"
                                                value={formData.lastName}
                                                onChange={handleInputChange}
                                                hasError={!!errors.lastName}
                                                placeholder="–§–∞–º–∏–ª–∏—è*"
                                            />
                                            {errors.lastName && <ErrorField message={errors.lastName} />}
                                            <div className="required-label">–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</div>
                                        </div>

                                        <div className="form-group">
                                            <label htmlFor="email">Email*</label>
                                            <Input
                                                id="email"
                                                name="email"
                                                type="email"
                                                value={formData.email}
                                                onChange={handleInputChange}
                                                hasError={!!errors.email}
                                                placeholder="Email*"
                                            />
                                            {errors.email && <ErrorField message={errors.email} />}
                                            <div className="required-label">–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</div>
                                        </div>

                                        <div className="form-group">
                                            <label htmlFor="city">–ì–æ—Ä–æ–¥*</label>
                                            <Select
                                                id="city"
                                                name="city"
                                                value={formData.city}
                                                onChange={handleInputChange}
                                                hasError={!!errors.city}
                                                style={{ color: formData.city ? '#353536' : '#7C7C7C' }}
                                            >
                                                <option value="">–ì–æ—Ä–æ–¥*</option>
                                                {cities.map(city => (
                                                    <option key={city} value={city}>{city}</option>
                                                ))}
                                            </Select>
                                            {errors.city && <ErrorField message={errors.city} />}
                                            <div className="required-label">–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</div>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>

                {isSaving && <div className="save-loader">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...</div>}

                {/* –°–µ–∫—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <div className="profile-projects-section">
                    <h2>–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</h2>
                    <div className="projects-list">
                        {userData.projects.map((project) => (
                            <div
                                key={project.id}
                                className="project-item"
                                onClick={() => handleOpenProject(project.id)}
                            >
                                <span className="project-emoji">{project.emoji}</span>
                                <span className="project-title">{project.title}</span>
                                {project.isPrivate && (
                                    <span className="project-private-icon">üîí</span>
                                )}
                            </div>
                        ))}
                    </div>
                    <div className="all-projects-button-container">
                        <Button onClick={navigateToAllProjects}>
                            –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
                        </Button>
                    </div>
                </div>
            </div>
            <Footer />
        </div>
    );
};

export default ProfilePage;